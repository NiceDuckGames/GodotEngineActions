{
	"Create A 2D Character": [
		{
			"command_name": "create_scene",
			"params": [
				"CharacterBody2D",
				"CharacterBody2D",
				"res://character_body_2d.tscn"
			]
		},
		{
			"command_name": "open_scene",
			"params": [
				"res://character_body_2d.tscn"
			]
		},
		{
			"command_name": "create_script",
			"params": [
				"res://character_body_2d.gd",
				"extends CharacterBody2D\n\n\nconst SPEED = 300.0\nconst JUMP_VELOCITY = -400.0\n\n# Get the gravity from the project settings to be synced with RigidBody nodes.\nvar gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")\n\n\nfunc _physics_process(delta):\n\t# Add the gravity.\n\tif not is_on_floor():\n\t\tvelocity.y += gravity * delta\n\n\t# Handle Jump.\n\tif Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():\n\t\tvelocity.y = JUMP_VELOCITY\n\n\t# Get the input direction and handle the movement/deceleration.\n\t# As good practice, you should replace UI actions with custom gameplay actions.\n\tvar direction = Input.get_axis(\"ui_left\", \"ui_right\")\n\tif direction:\n\t\tvelocity.x = direction * SPEED\n\telse:\n\t\tvelocity.x = move_toward(velocity.x, 0, SPEED)\n\n\tmove_and_slide()\n"
			]
		},
		{
			"command_name": "edit_script",
			"params": [
				"res://character_body_2d.gd",
				"int(0)",
				"int(0)"
			]
		},
		{
			"command_name": "load_resource",
			"params": [
				"res://character_body_2d.gd"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				".",
				"script",
				"$_"
			]
		},
		{
			"command_name": "add_node",
			"params": [
				".",
				"CollisionShape2D",
				"CollisionShape2D"
			]
		},
		{
			"command_name": "create_resource",
			"params": [
				"CapsuleShape2D"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"CollisionShape2D",
				"shape",
				"$_"
			]
		},
		{
			"command_name": "add_node",
			"params": [
				".",
				"Sprite2D",
				"Sprite2D"
			]
		},
		{
			"command_name": "load_resource",
			"params": [
				"res://stick_man.png"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"Sprite2D",
				"texture",
				"$_"
			]
		},
		{
			"command_name": "save_scene",
			"params": [
				""
			]
		}
	],
	"Create a 3D character": [
		{
			"command_name": "create_scene",
			"params": [
				"CharacterBody3D",
				"Character",
				"res://character.tscn"
			]
		},
		{
			"command_name": "open_scene",
			"params": [
				"res://character.tscn"
			]
		},
		{
			"command_name": "add_node",
			"params": [
				".",
				"CollisionShape3D",
				"CollisionShape3D"
			]
		},
		{
			"command_name": "create_resource",
			"params": [
				"CapsuleShape3D"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"CollisionShape3D",
				"shape",
				"$_"
			]
		},
		{
			"command_name": "add_node",
			"params": [
				".",
				"MeshInstance3D",
				"MeshInstance3D"
			]
		},
		{
			"command_name": "create_resource",
			"params": [
				"CapsuleMesh"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"MeshInstance3D",
				"mesh",
				"$_"
			]
		},
		{
			"command_name": "create_script",
			"params": [
				"res://character.gd",
				"extends CharacterBody3D\n\n\nconst SPEED = 5.0\nconst JUMP_VELOCITY = 4.5\n\n# Get the gravity from the project settings to be synced with RigidBody nodes.\nvar gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")\n\n\nfunc _physics_process(delta):\n\t# Add the gravity.\n\tif not is_on_floor():\n\t\tvelocity.y -= gravity * delta\n\n\t# Handle Jump.\n\tif Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():\n\t\tvelocity.y = JUMP_VELOCITY\n\n\t# Get the input direction and handle the movement/deceleration.\n\t# As good practice, you should replace UI actions with custom gameplay actions.\n\tvar input_dir = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")\n\tvar direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()\n\tif direction:\n\t\tvelocity.x = direction.x * SPEED\n\t\tvelocity.z = direction.z * SPEED\n\telse:\n\t\tvelocity.x = move_toward(velocity.x, 0, SPEED)\n\t\tvelocity.z = move_toward(velocity.z, 0, SPEED)\n\n\tmove_and_slide()\n"
			]
		},
		{
			"command_name": "edit_script",
			"params": [
				"res://character.gd",
				"int(0)",
				"int(0)"
			]
		},
		{
			"command_name": "load_resource",
			"params": [
				"res://character.gd"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				".",
				"script",
				"$_"
			]
		},
		{
			"command_name": "add_node",
			"params": [
				".",
				"Camera3D",
				"Camera3D"
			]
		},
		{
			"command_name": "save_scene",
			"params": []
		}
	],
	"Run a scene": [
		{
			"command_name": "run_scene_from_file",
			"params": [
				"res://test.tscn"
			]
		}
	],
	"Open a scene": [
		{
			"command_name": "open_scene",
			"params": [
				"res://test.tscn"
			]
		}
	],
	"Create a 2D scene": [
		{
			"command_name": "create_scene",
			"params": [
				"Node2D",
				"Node2D",
				"res://node_2d.tscn"
			]
		},
		{
			"command_name": "open_scene",
			"params": [
				"res://node_2d.tscn"
			]
		}
	],
	"Connect a signal": [
		{
			"command_name": "connect_signal",
			"params": [
				"Sprite2D",
				".",
				"frame_changed",
				"_on_sprite_2d_frame_changed"
			]
		}
	],
	"Connect a signal to a new method": [
		{
			"command_name": "append_to_current_script",
			"params": [
				"\nfunc _on_sprite_2d_frame_changed():\\n\\t\n\tpass # Replace with function body.\n"
			]
		},
		{
			"command_name": "connect_signal",
			"params": [
				"Node2D/Sprite2D",
				"Node2D",
				"frame_changed",
				"_on_sprite_2d_frame_changed"
			]
		}
	],
	"Attach a script": [
		{
			"command_name": "load_resource",
			"params": [
				"res://node_2d.gd"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				".",
				"script",
				"$_"
			]
		}
	],
	"Change node type": [
		{
			"command_name": "change_node_type",
			"params": [
				"Sprite2D",
				"AnimatedSprite2D"
			]
		}
	],
	"Move a node": [
		{
			"command_name": "move_node",
			"params": [
				"Sprite2D",
				"Node2D/Sprite2D"
			]
		}
	],
	"Add a node": [
		{
			"command_name": "add_node",
			"params": [
				".",
				"Node2D",
				"Node2D2"
			]
		}
	],
	"Delete a node": [
		{
			"command_name": "delete_node",
			"params": [
				"Node2D2"
			]
		}
	],
	"Add a scene": [
		{
			"command_name": "add_scene",
			"params": [
				"res://test.tscn",
				".",
				"World"
			]
		}
	],
	"Create a Resource": [
		{
			"command_name": "create_resource",
			"params": [
				"Resource"
			]
		},
		{
			"command_name": "save_resource",
			"params": [
				"res://new_resource.tres",
				"$_"
			]
		}
	],
	"Set a node's property": [
		{
			"command_name": "set_property",
			"params": [
				"Node2D",
				"position",
				"Vector2(10, 0)"
			]
		}
	],
	"Set a node's resource property": [
		{
			"command_name": "load_resource",
			"params": [
				"res://stick_man.png"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"Node2D/Sprite2D",
				"texture",
				"$_"
			]
		}
	],
	"Set a script's source code": [
		{
			"command_name": "set_current_script_text",
			"params": [
				"extends Node2D\n\n\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n\tprint(\"Hello World!\")\n\n\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n\tpass\n\n\n\nfunc _on_sprite_2d_frame_changed():\n\tpass # Replace with function body.\n"
			]
		},
		{
			"command_name": "save_scene",
			"params": [
				""
			]
		}
	],
	"test int": [
		{
			"command_name": "edit_script",
			"params": [
				"res://test.gd",
				"int(11)",
				"int(5)"
			]
		}
	],
	"Test Types": [
		{
			"command_name": "add_node",
			"params": [
				".",
				"Node2D",
				"Node2D"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"Node2D",
				"position",
				"Vector2(52, 100)"
			]
		}
	],
	"test scene": [
		{
			"command_name": "create_scene",
			"params": [
				"MarginContainer",
				"MarginContainer",
				"res://margin_container.tscn"
			]
		},
		{
			"command_name": "open_scene",
			"params": [
				"res://margin_container.tscn"
			]
		},
		{
			"command_name": "set_property",
			"params": [
				"Label",
				"text",
				"This is a test scene"
			]
		},
		{
			"command_name": "save_scene",
			"params": [
				""
			]
		}
	]
}
